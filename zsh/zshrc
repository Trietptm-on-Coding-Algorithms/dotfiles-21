ZSH=$HOME/.oh-my-zsh

ZSH_THEME="mh"

alias ruby="/usr/local/Cellar/ruby21/2.1.6/bin/ruby"
alias irb="/usr/local/Cellar/ruby21/2.1.6/bin/irb"
alias gem="/usr/local/Cellar/ruby21/2.1.6/bin/gem"
alias volst="/Users/aswanda/CCU/reversing/volatility_2.4.mac.standalone/volatility_2.4_x64"
alias pcat="pygmentize $@"
alias gclone="git clone $@"
alias dtrs="sudo dtruss -p $@"
alias nstcp="netstat -ap tcp"

# basic stuff for malware files
alias subfile="hachoir-subfile $@"
alias extmd="hachoir-metadata $@"
alias getstatic="python /usr/local/sbin/getstatic.py"
alias mvexe="for i in `file * | grep 'executable' | awk '{print $1}' | rev | cut -c 2- | rev`; do mv $i $1/$i; done"
alias strings="strings -t x"

alias pyserve="python -m SimpleHTTPServer"
alias b64dec="python -m base64 -d $@"
alias b64enc="python -m base64 -e $@"

alias clrhist='cat /dev/null > ~/.zsh_history'
alias srm='srm -m -v -f $@'
alias pidof='/usr/local/Cellar/pidof/0.1.4/bin/pidof $@'

alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
alias myip2='curl http://ifconfig.me/ip'
alias btcnow="python -c 'import requests; r = requests.get(\"https://blockchain.info/tobtc?currency=USD&value=100\"); print \"right now it will cost you 100 USD to buy %s Bitcoin!\" % r.content.strip()'"
alias netmon="clear; while x=0; do clear; date; echo \"\"; echo \"Active Network Connections\"; echo \"----------------------\"; lsof -nPi| grep '\->' |awk '{print $9}'; sleep 5; done"

alias urlenc='python -c "import sys, urllib as u; print u.quote_plus(sys.argv[1])"'
alias urldec='python -c "import sys, urllib as u; print u.unquote_plus(sys.argv[1])"'

alias vncview='open vnc://$@'
alias j="jobs"
alias h="history"
alias zshrc="vim ~/.zshrc"

gethashes()
{
    IFS=
    [ -n "$1" ] || return
    for i in $*; do
        md5sum "$i"
        sha1sum "$i"
        sha256sum "$i"
    done
}

md5rename()
{
    IFS=
    local md5=
    [ -n "$1" ] || return
    for i in $*; do
        md5=$(md5sum "$i" | cut -d' ' -f)
        mv "$i" "$md5"
    done
}

zipmal()
{
    [ -n "$1" ] || return
    local name=${1%\.*}.zip
    zip -- encrypt -P infected "$name" $@
    ls -lh "$name"
}

wgetua()
{
    [ "$1" ] || return
    local ua='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0'
    wget -c --user-agent "$ua" "$1"
}


matrix()
{
    echo -e "\e[32m";
    while :; do
        printf '%*c' $(($RANDOM % 30)) $(($RANDOM % 2));
    done
}

shr()
{
    [ $# -lt 2 ] && return 1
    echo $(($1>>$2))
}

shl()
{
    [ $# -lt 2 ] && return 1
    echo $(($1<<$2))
}

pow()
{
    [ $# -lt 2 ] && return 1
    echo $(($1**$2))
}

hexcalc()
{
    test $# -ne 3 && return 1
    echo -n 0x
    bh_dec2hex $((0x${1#0x} $2 0x${3#0x}))
}

xor()
{
   [ $# -lt 2 ] && return 1
    echo $(($1^$2))
}

charcalc()
{
    [ $# -ne 3 ] && return 1
    local char
    local chars
    local res
    local i
    case $2 in
        +|-)
            for i in $(echo "$1" | sed 's/./& /g'); do
                char=$(bh_asc2dec $i)
                res=$(($char $2 $3))
                    echo -n $(bh_dec2asc $res)
        done
        echo
        ;;
        '*')
            for (( i=0; i<$3; i++ )); do
                res="$res$1"
            done
            echo $res
        ;;
    esac

}

dec2hex() { printf "%x\n" "$1"; }
hex2dec() { echo $((0x${1#0x})); }
dec2bin() { echo "obase=2;$1" | bc; }
bin2dec() { echo $((2#$1)); }
b64d() { echo $1 | base64 -d; }
asmgrep() { gobjdump -d "$2" | grep --color -C 4 -E "$1"; }
dec2asc() { echo -e $(printf "\\\x%x" $1); }
asc2dec() { printf "%d\n" "'$1"; }

hex2bin()
{
    local bin
    for i in $*; do
        bin=$(echo "obase=2;ibase=16;$(echo $i | tr a-f A-F)" | bc)
        echo -n "$bin "
    done
    echo
}

sc2asm()
{
    local mode=32
    local in="$1"
    [ $1 = '-m' ] && mode=$2 in="$3"
    sc=$(echo "$in" | sed 's/\\x/ /g')
    echo "$sc" | udcli -$mode -x -noff -nohex | sed 's/^ //'
}

asm2sc()
{
    local obj=$(mktemp)
    local fmt=elf32
    local in="$1"
    [ $1 = "-f" ] && fmt=$2 in="$3"
    nasm -f $fmt -o $obj $in
    gobjdump -M intel -D $obj |
     tr -d \\t |
     sed -nr 's/^.*:(([0-9a-f]{2} )*).*$/\1/p' |
     tr -d \\n |
     sed 's/\(..\) /\\x\1/g'
    echo
    rm -f $obj
}

hex2str()
{
    [ $# -ne 1 ] && return 1
    local hex
    local str
    local i
    hex=$(echo $1 | sed 's/\(0x\|\\x\| \|{\|}\|,\)//g')
    # insert a space each two chars
    hex=$(echo $hex | sed 's/../& /g')
    # prefix with \x, needed by echo
    for i in $hex; do
        str="$str\\x$i"
    done
    echo -e $str
}

str2hex()
{
    [ $# -eq 0 ] && return 1
    case "$1" in
        "-s")
            echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/^/0x/'
            echo
            ;;
        "-x")
            echo -n "$2" | hexdump -ve '/1 "%02x"' | sed 's/../\\x&/g'
            echo
            ;;
        "-0x")
            echo -n "$2" | hexdump -ve '/1 "0x%02x "' | sed 's/\(.*\) /\1/'
            echo
            ;;
        "-c")
            echo -n '{'
            echo -n "$2" | hexdump -ve '/1 "0x%02x, "' | sed 's/\(.*\), /\1/'
            echo '}'
            ;;
        *)
            echo -n "$1" | hexdump -ve '/1 "%02x "' | sed 's/\(.*\) /\1/'
            echo
            ;;
    esac
}

geoip()
{
    wget -q --timeout=30 "http://xml.utrace.de/?query=$1" -O - | sed '4d' | sed "s/<[^>]*>//g; s/\t//g; /^$/d" | tr '\n' ',' ; echo "\n"
}

hostcalc()
{
    local iCidr
    local iTotalHost
    bh_isdigit $1
    [ $? -eq 0 \
        -a $1 -le 30 \
        -a $1 -ge 2 ] || return 1
    iCidr=$1
    iTotalHost=$(bh_pow 2 $((32-iCidr)))
    echo ${iTotalHost} - 2 | bc
}

asciitable()
{
    echo -en \
    "Dec Hex    Dec Hex    Dec Hex  Dec Hex  Dec Hex  Dec Hex   Dec Hex   Dec Hex\n\
    0 00 NUL  16 10 DLE  32 20    48 30 0  64 40 @  80 50 P   96 60 \`  112 70 p\n\
    1 01 SOH  17 11 DC1  33 21 !  49 31 1  65 41 A  81 51 Q   97 61 a  113 71 q\n\
    2 02 STX  18 12 DC2  34 22 \"  50 32 2  66 42 B  82 52 R   98 62 b  114 72 r\n\
    3 03 ETX  19 13 DC3  35 23 #  51 33 3  67 43 C  83 53 S   99 63 c  115 73 s\n\
    4 04 EOT  20 14 DC4  36 24 $  52 34 4  68 44 D  84 54 T  100 64 d  116 74 t\n\
    5 05 ENQ  21 15 NAK  37 25 %  53 35 5  69 45 E  85 55 U  101 65 e  117 75 u\n\
    6 06 ACK  22 16 SYN  38 26 &  54 36 6  70 46 F  86 56 V  102 66 f  118 76 v\n\
    7 07 BEL  23 17 ETB  39 27 '  55 37 7  71 47 G  87 57 W  103 67 g  119 77 w\n\
    8 08 BS   24 18 CAN  40 28 (  56 38 8  72 48 H  88 58 X  104 68 h  120 78 x\n\
    9 09 HT   25 19 EM   41 29 )  57 39 9  73 49 I  89 59 Y  105 69 i  121 79 y\n\
   10 0A LF   26 1A SUB  42 2A *  58 3A :  74 4A J  90 5A Z  106 6A j  122 7A z\n\
   11 0B VT   27 1B ESC  43 2B +  59 3B ;  75 4B K  91 5B [  107 6B k  123 7B {\n\
   12 0C FF   28 1C FS   44 2C ,  60 3C <  76 4C L  92 5C \\  108 6C l  124 7C |\n\
   13 0D CR   29 1D GS   45 2D -  61 3D =  77 4D M  93 5D ]  109 6D m  125 7D }\n\
   14 0E SO   30 1E RS   46 2E .  62 3E >  78 4E N  94 5E ^  110 6E n  126 7E ~\n\
   15 0F SI   31 1F US   47 2F /  63 3F ?  79 4F O  95 5F _  111 6F o  127 7F DEL\n"
}

utf8table()
{
    echo -en \
    "Hex      Hex      Hex      Hex      Hex      Hex      Hex      Hex\n\
    c2 a0    c2 ac ¬  c2 b8 ¸  c3 84 Ä  c3 90 Ð  c3 9c Ü  c3 a8 è  c3 b4 ô\n\
    c2 a1 ¡  c2 ad ­  c2 b9 ¹  c3 85 Å  c3 91 Ñ  c3 9d Ý  c3 a9 é  c3 b5 õ\n\
    c2 a2 ¢  c2 ae ®  c2 ba º  c3 86 Æ  c3 92 Ò  c3 9e Þ  c3 aa ê  c3 b6 ö\n\
    c2 a3 £  c2 af ¯  c2 bb »  c3 87 Ç  c3 93 Ó  c3 9f ß  c3 ab ë  c3 b7 ÷\n\
    c2 a4 ¤  c2 b0 °  c2 bc ¼  c3 88 È  c3 94 Ô  c3 a0 à  c3 ac ì  c3 b8 ø\n\
    c2 a5 ¥  c2 b1 ±  c2 bd ½  c3 89 É  c3 95 Õ  c3 a1 á  c3 ad í  c3 b9 ù\n\
    c2 a6 ¦  c2 b2 ²  c2 be ¾  c3 8a Ê  c3 96 Ö  c3 a2 â  c3 ae î  c3 ba ú\n\
    c2 a7 §  c2 b3 ³  c2 bf ¿  c3 8b Ë  c3 97 ×  c3 a3 ã  c3 af ï  c3 bb û\n\
    c2 a8 ¨  c2 b4 ´  c3 80 À  c3 8c Ì  c3 98 Ø  c3 a4 ä  c3 b0 ð  c3 bc ü\n\
    c2 a9 ©  c2 b5 µ  c3 81 Á  c3 8d Í  c3 99 Ù  c3 a5 å  c3 b1 ñ  c3 bd ý\n\
    c2 aa ª  c2 b6 ¶  c3 82 Â  c3 8e Î  c3 9a Ú  c3 a6 æ  c3 b2 ò  c3 be þ\n\
    c2 ab «  c2 b7 ·  c3 83 Ã  c3 8f Ï  c3 9b Û  c3 a7 ç  c3 b3 ó  c3 bf ÿ\n"
}

COMPLETION_WAITING_DOTS="true"

plugins=(pip python encode64 brew git zsh-syntax-highlighting history gnu-utils tmux sublime battery urltools:q)
export BYOBU_PREFIX=$(brew --prefix)
source $ZSH/oh-my-zsh.sh
export TARGET_LANG=en
export BYOBU_PREFIX=$(brew --prefix)
PATH="/usr/lib/lightdm/lightdm:/opt/local/bin:/opt/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:/usrlocal/git/bin:/usr/local/MacGPG2/bin"
export PATH=/usr/local/bin:$PATH

